<?xml version="1.0" encoding="utf-8"?>
<project name="" default="package" basedir=".">
    <description>
      Bits and pieces plucked out of $ANDROID_HOME/tools/ant/build.xml
    </description>

    <property name="adb.device.arg" value="" />
    <property environment="env"/>
    <property name="staging.dir" location="staging" />
    <property name="bin.dir" location="bin" />
    <property name="test.app.aapt" location="${bin.dir}/Test_aapt.apk" />
    <property name="dex.file" location="${bin.dir}/classes.dex" />
    <property name="test.app.unsigned" location="${bin.dir}/Test_unsigned.apk" />
    <property name="calabashjs.dir" location="calabash-js/src" />

    <property name="dx" location="${tools.dir}/dx" />
    <property name="aapt" location="${tools.dir}/aapt" />

    <property name="android.lib" location="${env.ANDROID_HOME}/platforms/android-${android.api.level}/android.jar" />

    <path id="jar.libs.ref">
      <fileset dir="${staging.dir}/libs/" includes="*.jar" />
    </path>

    <path id="android.target.classpath">
      <fileset dir="${env.ANDROID_HOME}/platforms/android-${android.api.level}/" includes="*.jar" />
    </path>

    <target name="clean" description="clean up">
      <delete dir="${staging.dir}"/>
      <delete dir="${bin.dir}"/>
    </target>

    <target name="-check.preconditions">
      <available file="${calabashjs.dir}" type="dir" property="doesCalabashJsExist" />
      <fail unless="doesCalabashJsExist">
        ${calabashjs.dir} does not exist.
      </fail>
      <antversion property="version.running" />
      <fail message="FATAL ERROR:  The running Ant version, ${version.running}, is too old.">
        <condition>
          <not>
            <antversion atleast="1.8" />
          </not>
        </condition>
      </fail>
    </target>

    <target name="package" depends="-check.preconditions">
      <antcall target="-compile" />
      <antcall target="-aapt" />
      <antcall target="-dex" />
      <antcall target="-apk" />
    </target>

    <target name="-compile">
      <antcall target="-stage" />
      <javac
       srcdir="${staging.dir}/src"
       destdir="${bin.dir}"
       verbose="${verbose}"
         source="1.8"
         target="1.8"
         debug="true"
         includeantruntime="false"
       bootclasspathref="android.target.classpath"
       classpath="${extensible.classpath}"
       classpathref="jar.libs.ref" />
    </target>

    <target name="-stage">
      <mkdir dir="${staging.dir}" />
      <mkdir dir="${bin.dir}" />
      <antcall target="-prepare.testserver" />
    </target>

    <target name="-prepare.testserver" description="Makes sure the testserver matches the tested application by looking at its manifest file">
      <copy todir="${staging.dir}">
    <fileset dir="instrumentation-backend" />
      </copy>

      <copy todir="${staging.dir}/assets">
        <fileset dir="${calabashjs.dir}" />
      </copy>

      <replace file="${staging.dir}/src/main/java/sh/calaba/instrumentationbackend/actions/version/Version.java" token="####VERSION####" value="${version}" failOnNoReplacements="true" />

      <property name="src.dir.absolute" location="${staging.dir}/src" />

      <pathconvert property="testserver.actions" pathsep="${line.separator}" dirsep=".">
        <fileset dir="${src.dir.absolute}" includes="main/java/sh/calaba/instrumentationbackend/actions/**/*.java" />
        <globmapper from="${src.dir.absolute}/*.java" to="*" handledirsep="true" />
      </pathconvert>

      <echo file="${staging.dir}/assets/actions" message="${testserver.actions}${line.separator}" />
    </target>

    <target name="-aapt">
      <exec executable="${aapt}" failonerror="yes">
        <arg value="package" />
        <arg value="-f" />
        <arg value="-F" />
        <arg file="${test.app.aapt}" />
        <arg value="-I" />
        <arg path="${android.lib}" />
        <arg value="-A" />
        <arg path="${staging.dir}/assets" />
        <arg value="-m" />
        <arg value="-J" />
        <arg path="gen" />
      </exec>
    </target>

    <target name="-dex">
      <copy todir="${bin.dir}/libs">
        <fileset dir="instrumentation-backend/libs" />
      </copy>
      <exec executable="${dx}" failonerror="yes">
        <arg value="--dex" />
        <arg value="--output" />
        <arg file="${dex.file}" />
        <arg path="${bin.dir}" />
      </exec>
    </target>

    <target name="-apk">
      <exec executable="java" failonerror="yes">
        <arg value="-jar" />
        <arg value="${staging.dir}/CalabashApkBuilder.jar" />
        <arg file="${test.app.unsigned}" />
        <arg file="${test.app.aapt}" />
        <arg file="${dex.file}" />
      </exec>
    </target>

</project>
