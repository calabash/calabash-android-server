apply plugin: 'java'
apply plugin: 'application'

// gradle build -Dorg.gradle.java.home=/JDK_PATH

mainClassName = 'sh.calaba.instrumentationbackend'

def env_ANDROID_HOME = System.getenv('ANDROID_HOME')

def android_api_level = "22"
def tools_dir = "${env_ANDROID_HOME}/build-tools/27.0.3"
def version = "0.9.2"

def root_folder = "../instrumentation-backend"
def staging_dir = "../staging"
def bin_dir = "../bin"
def calabashjs_dir = "../calabash-js/src"

def test_app_aapt = "${bin_dir}/Test_aapt.apk"
def dex_file = "${bin_dir}/classes.dex"
def test_app_unsigned = "${bin_dir}/Test_unsigned.apk"
def actions_dir = "${staging_dir}/src/main/java/sh/calaba/instrumentationbackend/actions"
def version_file = "${actions_dir}/version/Version.java"

def android_lib = "${env_ANDROID_HOME}/platforms/android-${android_api_level}/android.jar"

sourceSets {
    generated {
        java {
            srcDir "$projectDir/src"
        }
    }
}

repositories {
    jcenter()
    google()
}

task customClean(type: Delete) {
    delete "${staging_dir}"
}
clean.dependsOn customClean

task preparePackage(type: JavaExec) {
    /*if (!project.hasProperty('tools_dir')) {
        throw new GradleException('"tools_dir" parameter should be provided!')
    }

    if (!project.hasProperty('android_api_level')) {
        throw new GradleException('"android_api_level" parameter should be provided!')
    }

    if (!project.hasProperty('version')) {
        throw new GradleException('"version" parameter should be provided!')
    }*/

    println("Build started...")
}

task prepareStage {
    doLast {
        mkdir "${staging_dir}"
        mkdir "${bin_dir}"
    }
}

task prepareTestServer(type: Copy) {
    from "${root_folder}"
    into "${staging_dir}"
}

task prepareAssets(type: Copy) {
    from "${calabashjs_dir}"
    into "${staging_dir}/assets"
}

// TODO: version replacement
task replaceVersion(type: Copy) {
    from "${version_file}"
    into "${actions_dir}"
    filter { line -> line.replaceAll("####VERSION####", "${version}") }

    doLast {
        file("${actions_dir}/Version.java").renameTo(file("${version_file}"))
    }
}

task pathconvert {
    doLast {
        FileTree files = fileTree("${staging_dir}/src").matching {
            include 'main/java/sh/calaba/instrumentationbackend/actions/**/*.java'
        }

        //def args = [files.asPath]
        //println(files)

        File outputFile = new File("${staging_dir}/assets", "actions");
        File outputDirectory = outputFile.getParentFile();
        outputFile.createNewFile();

        FileWriter writer = new FileWriter(outputFile, true)

        try {
            for(def file : files) {
                writer.write(file.getPath() + "\n");
            }
        } finally {
            writer.close()
        }
    }
}

compileJava {
    options.compilerArgs << "-s"
    options.compilerArgs << "${bin_dir}"
}

task aapt(type: Exec) {
    workingDir "${tools_dir}"
    executable "aapt"
    args "package", "-f", "-F", "${test_app_aapt}", "-I", "${android_lib}", "-A", "${staging_dir}/assets", "-m", "-J", "gen"
}

task copyLib(type: Copy) {
    from "instrumentation-backend/libs"
    into "${bin_dir}/libs"
}

task dex(type: Exec) {
    workingDir "${tools_dir}"
    executable "dx"
    args "--dex", "--output", "${dex_file}", "${bin_dir}"
}

task createApk(type: Exec) {
    executable "java"
    args "-jar", "${staging_dir}/CalabashApkBuilder.jar", "${test_app_unsigned}", "${test_app_aapt}", "${dex_file}"
}

/*
 * Task order: preparePackage -> prepareStage -> prepareTestServer -> prepareAssets ->
 * replaceVersion -> pathconvert -> compileJava -> aapt -> copyLib -> dex -> createApk.
 */

preparePackage.dependsOn createApk
createApk.dependsOn dex
dex.dependsOn copyLib
copyLib.dependsOn aapt
aapt.dependsOn compileJava
compileJava.dependsOn pathconvert
pathconvert.dependsOn replaceVersion
replaceVersion.dependsOn prepareAssets
prepareAssets.dependsOn prepareTestServer
prepareTestServer.dependsOn prepareStage

/*jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

    manifest {
        attributes 'Main-Class': 'sh.calaba.instrumentationbackend'
    }
}*/

/*tasks.withType(Jar) {
    destinationDir = file("$rootDir")
}*/

dependencies {
    compile fileTree(dir: 'lib', include: '*.jar')
    implementation 'com.google.android.gms:play-services-maps:12.0.1'
}